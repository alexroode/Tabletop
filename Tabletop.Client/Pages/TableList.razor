@page "/tables"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager

<h1>Table List</h1>

<div class="d-flex flex-wrap mb-3">
    @foreach (var table in tables)
    {
    <div class="table-list-table p-3 me-3 mb-3 bg-light rounded">
        <div class="fw-bold">@table.Name</div>
        <div class="mb-3">@table.Game</div>
        <button class="btn btn-primary">Join</button>
    </div>
    }
</div>

<form @onsubmit="CreateTable" class="p-3 bg-light rounded">
    <h2>New Table</h2>
    <div class="mb-3">
        <label class="form-label">Table Name</label>
        <input class="form-control" id="newTableName" @bind="newTableName" @bind:event="oninput" />
    </div>
    <div class="mb-3">
        <label class="form-label">Game</label>
        <input class="form-control" id="newTableGame" @bind="newTableGame" />
    </div>
    <button type="submit" disabled="@IsCreateDisabled" class="btn btn-primary w-100">Create</button>
</form>

@code {
    private string newTableName;
    private string newTableGame;
    private bool isCreatingTable;

    private HubConnection hubConnection;
    private List<Table> tables = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/table"))
            .Build();

        hubConnection.On<Table>("TableCreated", table =>
        {
            tables.Add(table);
            StateHasChanged();
        });

        hubConnection.On<List<Table>>("UpdateTables", updatedTables =>
        {
            tables.Clear();
            tables.AddRange(updatedTables);
            StateHasChanged();
        });

        hubConnection.On("OwnTableCreated", async () =>
        {
            isCreatingTable = false;
            newTableName = "";
            newTableGame = "";
            await Task.Delay(1);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinChat");
    }

    async Task CreateTable()
    {
        isCreatingTable = true;
        await Task.Delay(1);
        await hubConnection.SendAsync("CreateTable", newTableName, newTableGame);
    }

    public bool IsCreateDisabled => !IsConnected || isCreatingTable || string.IsNullOrEmpty(newTableName) || string.IsNullOrEmpty(newTableGame);

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
