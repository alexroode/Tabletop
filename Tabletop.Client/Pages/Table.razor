@page "/table/{tableid}"
@inject NavigationManager NavigationManager
@inject ClientTableService tableService
@implements IAsyncDisposable
@attribute [Authorize]

@if (isLoading)
{
    <p>Loading...</p>
}
else if (table == null)
{
    <p>Not found</p>
}
else
{
    <h3>@table.Name</h3>

    <p>
        @table.Game
    </p>

    <div>
        @foreach (var user in Users)
        {
            <p>@user.Key.DisplayName</p>
            @if (user.Value.IsHost)
            {
                <p>Host</p>
            }
        }
    </div>
}

@code {
    [Parameter]
    public string TableId { get; set; }

    private Dictionary<User, TablePlayerMapping> Users = new();
    private HubConnection hubConnection;
    private bool isLoading = true;

    private Tabletop.Core.Tables.Table table;

    protected override async Task OnInitializedAsync()
    {
        table = await tableService.GetTableAsync(TableId);
        isLoading = false;

        if (table != null)
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/table"))
                .Build();

            hubConnection.On<Dictionary<User, TablePlayerMapping>>("UpdateUsers", users =>
            {
                Users.Clear();
                foreach (var pair in users)
                {
                    Users[pair.Key] = pair.Value;
                }
                StateHasChanged();
            });

            await hubConnection.StartAsync();
            await hubConnection.SendAsync("JoinTable", TableId);
        }

        await base.OnInitializedAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
