@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@implements IAsyncDisposable

<div class="chat-container bg-light d-flex flex-column">
    @if (IsConnected)
    {
        <div class="users-list mx-3">
            <span class="fw-bold me-2">Users here: </span>
            @foreach (var user in activeUsers)
            {
                <span class="me-2">@user.DisplayName</span>
            }
        </div>
        <div class="scroller flex-grow-1" id="chat-scroller">
            <ul class="list-unstyled mx-3">
                @foreach (var message in messages)
                {
                    <li>
                        <span class="badge bg-primary me-2">@message.Date.ToString("yyyy-MM-dd HH:mm")</span> 
                        @if (!message.System)
                        {
                            <span class="message-author me-2">@message.Author</span>
                            @message.Text
                        }
                        else
                        {
                            <span class="fst-italic">
                                @message.Text
                            </span>
                        }
                    </li>
                }
            </ul>
        </div>

        <form class="d-flex" @onsubmit="Send">
            <input @bind="messageInput" @bind:event="oninput" class="form-control flex-grow-1" maxlength="@Constants.MaxMessageLength" />
            <button type="submit" disabled="@(!CanSend)" class="btn btn-primary">Send</button>
        </form>
    }
    else
    {
        <div class="p-3">
            @if (hubConnection.State == HubConnectionState.Connecting)
            {
                <span>Connecting...</span>
            }
            else if (hubConnection.State == HubConnectionState.Reconnecting)
            {
                <span>Reconnecting...</span>
            }
            else
            {
                <span class="text-danger">Not connected</span>
            }
        </div>
    }
</div>

@code {
    [CascadingParameter] Task<AuthenticationState> authenticationStateTask { get; set; }
    [Inject] Microsoft.AspNetCore.Components.WebAssembly.Authentication.IAccessTokenProvider tokenProvider { get; set; }

    private HubConnection hubConnection;
    private List<ChatMessage> messages = new();
    private List<User> activeUsers = new();
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var username = authState.User.Identity.Name;

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/chat"), options =>
            {
                options.AccessTokenProvider = async () =>
                {
                    var accessTokenResult = await tokenProvider.RequestAccessToken();
                    accessTokenResult.TryGetToken(out var accessToken);
                    return accessToken.Value;
                };
            })
            .Build();

        hubConnection.On<ChatMessage>("ReceiveMessage", async message =>
        {
            messages.Add(message);
            await MessagesUpdated();
        });

        hubConnection.On<User>("UserJoined", async user =>
        {
            if (activeUsers.Any(u => u.Id == user.Id))
            {
                return;
            }
            activeUsers.Add(user);
            messages.Add(new ChatMessage() { Date = DateTimeOffset.UtcNow, Text = $"{user.DisplayName} has joined the chat", System = true });
            await MessagesUpdated();
        });

        hubConnection.On<User>("UserLeft", async user =>
        {
            var existingUser = activeUsers.FirstOrDefault(u => u.Id == user.Id);
            if (existingUser != null)
            {
                activeUsers.Remove(existingUser);
            }

            messages.Add(new ChatMessage() { Date = DateTimeOffset.UtcNow, Text = $"{user.DisplayName} has left the chat", System = true });
            await MessagesUpdated();
        });

        hubConnection.On<List<ChatMessage>>("UpdateMessages", async receivedMessages =>
        {
            messages.Clear();
            messages.AddRange(receivedMessages);
            await MessagesUpdated();
        });

        hubConnection.On<List<User>>("UpdateUsers", users =>
        {
            activeUsers.Clear();
            activeUsers.AddRange(users);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinChat");
    }

    async Task MessagesUpdated()
    {
        var wasScrolledToBottom = await IsScrolledToBottom();
        StateHasChanged();

        if (wasScrolledToBottom)
        {
            await ScrollToBottom();
        }
    }

    async Task Send()
    {
        if (!CanSend)
        {
            return;
        }

        await hubConnection.SendAsync("SendMessage", messageInput);
        messageInput = "";
    }

    public bool CanSend => IsConnected && !string.IsNullOrEmpty(messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    async Task<bool> IsScrolledToBottom()
    {
        return await JS.InvokeAsync<bool>("isChatScrolledToBottom");
    }

    async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("scrollChatToBottom");
    }
}