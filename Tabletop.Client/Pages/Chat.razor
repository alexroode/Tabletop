@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@implements IAsyncDisposable

<div class="chat-container bg-light d-flex flex-column">
    @if (IsConnected)
    {
        <div class="users-list mx-3">
            <span class="fw-bold me-3">Users here: </span>
            @foreach (var username in activeUsers)
            {
                <span class="me-3">@username</span>
            }
        </div>
        <div class="scroller flex-grow-1" id="chat-scroller">
            <ul class="list-unstyled mx-3">
                @foreach (var message in messages)
                {
                    <li><span class="badge bg-primary">@message.Date.ToString("yyyy-MM-dd HH:mm")</span> <span class="message-author">@message.Author</span> @message.Text</li>
                }
            </ul>
        </div>

        <form class="d-flex" @onsubmit="Send">
            <input @bind="messageInput" @bind:event="oninput" class="form-control flex-grow-1" />
            <button type="submit" disabled="@(!CanSend)" class="btn btn-primary">Send</button>
        </form>
    }
    else
    {
        <div class="p-3">
            @if (hubConnection.State == HubConnectionState.Connecting)
            {
                <span>Connecting...</span>
            }
            else if (hubConnection.State == HubConnectionState.Reconnecting)
            {
                <span>Reconnecting...</span>
            }
            else
            {
                <span class="text-danger">Not connected</span>
            }
        </div>
    }
</div>

@code {
    [Parameter] public string Username { get; set; }
    private HubConnection hubConnection;
    private List<ChatMessage> messages = new();
    private List<string> activeUsers = new List<string>();
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<ChatMessage>("ReceiveMessage", async message =>
        {
            messages.Add(message);
            await MessagesUpdated();
        });

        hubConnection.On<List<ChatMessage>>("ReceiveMessages", async receivedMessages =>
        {
            messages.AddRange(receivedMessages);
            await MessagesUpdated();
        });

        hubConnection.On<string>("UserJoined", username =>
        {
            activeUsers.Add(username);
            StateHasChanged();
        });

        hubConnection.On<string>("UserLeft", username =>
        {
            activeUsers.Remove(username);
            StateHasChanged();
        });

        hubConnection.On<List<string>>("CurrentUsers", usernames =>
        {
            activeUsers.AddRange(usernames);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinChat", Username);
    }

    async Task MessagesUpdated()
    {
        var wasScrolledToBottom = await IsScrolledToBottom();
        StateHasChanged();

        if (wasScrolledToBottom)
        {
            await ScrollToBottom();
        }
    }

    async Task Send()
    {
        if (!CanSend)
        {
            return;
        }

        await hubConnection.SendAsync("SendMessage", Username, messageInput);
        messageInput = "";
    }

    public bool CanSend => IsConnected && !string.IsNullOrEmpty(messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    async Task<bool> IsScrolledToBottom()
    {
        return await JS.InvokeAsync<bool>("isChatScrolledToBottom");
    }

    async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("scrollChatToBottom");
    }
}