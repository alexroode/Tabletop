@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@implements IAsyncDisposable

<div class="chat-container bg-light d-flex flex-column">
    <div class="scroller flex-grow-1" id="chat-scroller">
        <ul class="list-unstyled mx-3">
            @foreach (var message in messages)
            {
                <li>@message</li>
            }
        </ul>
    </div>

    <form class="d-flex" @onsubmit="Send">
        <input @bind="messageInput" @bind:event="oninput" class="form-control flex-grow-1" />
        <button type="submit" disabled="@(!CanSend)" class="btn btn-primary">Send</button>
    </form>
</div>

@code {
    [Parameter] public string Username { get; set; }
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", async (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            await MessagesUpdated();
        });

        hubConnection.On<List<ChatMessage>>("ReceiveMessages", async receivedMessages =>
        {
            var encoded = receivedMessages.Select(m => $"{m.Author}: {m.Text}");
            messages.AddRange(encoded);
            await MessagesUpdated();
        });

        await hubConnection.StartAsync();
    }

    async Task MessagesUpdated()
    {
        //var wasScrolledToBottom = true;
        var wasScrolledToBottom = await IsScrolledToBottom();
        StateHasChanged();

        if (wasScrolledToBottom)
        {
            await ScrollToBottom();
        }
    }

    async Task Send()
    {
        if (!CanSend)
        {
            return;
        }

        await hubConnection.SendAsync("SendMessage", Username, messageInput);
        messageInput = "";
    }

    public bool CanSend => IsConnected && !string.IsNullOrEmpty(messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    async Task<bool> IsScrolledToBottom()
    {
        return await JS.InvokeAsync<bool>("isChatScrolledToBottom");
    }

    async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("scrollChatToBottom");
    }
}